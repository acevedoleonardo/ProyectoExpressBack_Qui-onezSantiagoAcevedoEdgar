// ==========================================
// ARCHIVO: server/controllers/peliculasController.js
// PROP√ìSITO: L√≥gica de negocio para manejar pel√≠culas
// ==========================================

// Importa la funci√≥n para conectar a la base de datos
const connectDB = require('../config/db');
// Importa ObjectId para trabajar con IDs de MongoDB
// Al importar ObjectId, podemos convertir strings a IDs de MongoDB
// y validar que los IDs tengan el formato correcto
const { ObjectId } = require('mongodb');

// ==========================================
// FUNCI√ìN 1: OBTENER TODAS LAS PEL√çCULAS
// ==========================================
// Funci√≥n para obtener todas las pel√≠culas
async function getPeliculas(req, res, next) {
  try {
    // PASO 1: Obtener conexi√≥n a la base de datos
    const db = await connectDB(); // Conecta a la base de datos
    
    // PASO 2: Buscar todas las pel√≠culas en la colecci√≥n 'peliculas'
    const peliculas = await db.collection('peliculas').find({}).toArray(); // Obtiene todas las pel√≠culas como un arreglo
    
    // PASO 3: Mostrar informaci√≥n en consola (para debug)
    console.log(`üìΩÔ∏è Encontradas ${peliculas.length} pel√≠culas en el cat√°logo`); // Muestra cu√°ntas pel√≠culas se encontraron
    
    // PASO 4: Enviar respuesta exitosa al cliente
    res.status(200).json({ // Env√≠a respuesta HTTP 200 con los datos
      success: true, // Indica que todo sali√≥ bien
      message: 'Pel√≠culas obtenidas correctamente', // Mensaje descriptivo
      cantidad: peliculas.length, // N√∫mero de pel√≠culas encontradas
      data: peliculas // Los datos reales de las pel√≠culas
    });
    
  } catch (error) {
    // Si hay error, pasarlo al middleware de manejo de errores
    console.error('‚ùå Error al obtener pel√≠culas:', error.message); // Muestra el error en consola
    next(error); // Pasa el error al siguiente middleware
  }
}

// ==========================================
// FUNCI√ìN 2: OBTENER UNA PEL√çCULA POR SU ID
// ==========================================
// Funci√≥n para obtener una pel√≠cula por su ID
async function getPeliculaById(req, res, next) {
  try {
    // PASO 1: Obtener conexi√≥n a la base de datos
    const db = await connectDB(); // Conecta a la base de datos
    
    // PASO 2: Obtener el ID desde los par√°metros de la URL (/peliculas/:id)
    const { id } = req.params; // Extrae el id de la URL
    
    // PASO 3: Validar que el ID tenga formato correcto de MongoDB
    if (!ObjectId.isValid(id)) { // Verifica si el id es v√°lido
      return res.status(400).json({ // Si no es v√°lido, responde con error 400
        success: false,
        message: 'ID de pel√≠cula no v√°lido'
      });
    }
    
    // PASO 4: Buscar la pel√≠cula espec√≠fica en la base de datos
    const pelicula = await db.collection('peliculas').findOne({ 
      _id: new ObjectId(id) // Busca por el _id convertido a ObjectId
    });
    
    // PASO 5: Verificar si se encontr√≥ la pel√≠cula
    if (!pelicula) { // Si no se encuentra, responde con error 404
      return res.status(404).json({
        success: false,
        message: 'Pel√≠cula no encontrada'
      });
    }
    
    // PASO 6: Enviar la pel√≠cula encontrada
    console.log(`üé¨ Pel√≠cula encontrada: ${pelicula.title}`); // Muestra el t√≠tulo en consola
    res.status(200).json({ // Env√≠a la pel√≠cula encontrada
      success: true,
      message: 'Pel√≠cula encontrada',
      data: pelicula
    });
    
  } catch (error) {
    console.error('‚ùå Error al obtener pel√≠cula por ID:', error.message); // Muestra el error en consola
    next(error); // Pasa el error al siguiente middleware
  }
}

// ==========================================
// FUNCI√ìN 3: CREAR UNA NUEVA PEL√çCULA
// ==========================================
// Funci√≥n para crear una nueva pel√≠cula
async function createPelicula(req, res, next) {
  try {
    // PASO 1: Obtener conexi√≥n a la base de datos
    const db = await connectDB(); // Conecta a la base de datos
    
    // PASO 2: Obtener los datos de la nueva pel√≠cula desde el cuerpo de la petici√≥n
    const nuevaPelicula = req.body; // Obtiene los datos enviados por el cliente
    
    // PASO 3: Agregar fecha de creaci√≥n autom√°ticamente
    nuevaPelicula.fechaCreacion = new Date(); // Fecha de creaci√≥n actual
    nuevaPelicula.fechaActualizacion = new Date(); // Fecha de actualizaci√≥n actual
    
    // PASO 4: Verificar si ya existe una pel√≠cula con el mismo tmdb_id
    if (nuevaPelicula.tmdb_id) { // Si se envi√≥ tmdb_id
      const peliculaExistente = await db.collection('peliculas').findOne({
        tmdb_id: nuevaPelicula.tmdb_id // Busca si ya existe ese tmdb_id
      });
      
      if (peliculaExistente) { // Si existe, responde con error 409
        return res.status(409).json({
          success: false,
          message: 'Ya existe una pel√≠cula con ese TMDB ID'
        });
      }
    }
    
    // PASO 5: Insertar la nueva pel√≠cula en la base de datos
    const resultado = await db.collection('peliculas').insertOne(nuevaPelicula); // Inserta la pel√≠cula
    
    // PASO 6: Confirmar que se cre√≥ correctamente
    console.log(`‚úÖ Nueva pel√≠cula creada: ${nuevaPelicula.title}`); // Muestra el t√≠tulo en consola
    res.status(201).json({ // Env√≠a respuesta HTTP 201 con el id creado
      success: true,
      message: 'Pel√≠cula creada exitosamente',
      id: resultado.insertedId // ID de la pel√≠cula reci√©n creada
    });
    
  } catch (error) {
    console.error('‚ùå Error al crear pel√≠cula:', error.message); // Muestra el error en consola
    next(error); // Pasa el error al siguiente middleware
  }
}

// ==========================================
// FUNCI√ìN 4: ACTUALIZAR UNA PEL√çCULA EXISTENTE
// ==========================================
// Funci√≥n para actualizar una pel√≠cula existente
async function updatePelicula(req, res, next) {
  try {
    // PASO 1: Obtener conexi√≥n a la base de datos
    const db = await connectDB(); // Conecta a la base de datos
    
    // PASO 2: Obtener ID y datos a actualizar
    const { id } = req.params; // Extrae el id de la URL
    const cambios = req.body; // Obtiene los cambios enviados por el cliente
    
    // PASO 3: Validar ID
    if (!ObjectId.isValid(id)) { // Verifica si el id es v√°lido
      return res.status(400).json({ // Si no es v√°lido, responde con error 400
        success: false,
        message: 'ID de pel√≠cula no v√°lido'
      });
    }
    
    // PASO 4: Agregar fecha de actualizaci√≥n
    cambios.fechaActualizacion = new Date(); // Actualiza la fecha de modificaci√≥n
    
    // PASO 5: Actualizar la pel√≠cula en la base de datos
    const resultado = await db.collection('peliculas').updateOne(
      { _id: new ObjectId(id) }, // Filtro: qu√© documento actualizar
      { $set: cambios } // Operaci√≥n: qu√© campos cambiar
    );
    
    // PASO 6: Verificar si se encontr√≥ y actualiz√≥ la pel√≠cula
    if (resultado.matchedCount === 0) { // Si no se encontr√≥, responde con error 404
      return res.status(404).json({
        success: false,
        message: 'Pel√≠cula no encontrada'
      });
    }
    
    // PASO 7: Confirmar actualizaci√≥n
    console.log(`üìù Pel√≠cula actualizada con ID: ${id}`); // Muestra el id actualizado en consola
    res.status(200).json({ // Env√≠a respuesta HTTP 200
      success: true,
      message: 'Pel√≠cula actualizada correctamente'
    });
    
  } catch (error) {
    console.error('‚ùå Error al actualizar pel√≠cula:', error.message); // Muestra el error en consola
    next(error); // Pasa el error al siguiente middleware
  }
}

// ==========================================
// FUNCI√ìN 5: ELIMINAR UNA PEL√çCULA
// ==========================================
// Funci√≥n para eliminar una pel√≠cula
async function deletePelicula(req, res, next) {
  try {
    // PASO 1: Obtener conexi√≥n a la base de datos
    const db = await connectDB(); // Conecta a la base de datos
    
    // PASO 2: Obtener el ID de la pel√≠cula a eliminar
    const { id } = req.params; // Extrae el id de la URL
    
    // PASO 3: Validar ID
    if (!ObjectId.isValid(id)) { // Verifica si el id es v√°lido
      return res.status(400).json({ // Si no es v√°lido, responde con error 400
        success: false,
        message: 'ID de pel√≠cula no v√°lido'
      });
    }
    
    // PASO 4: Eliminar la pel√≠cula de la base de datos
    const resultado = await db.collection('peliculas').deleteOne({
      _id: new ObjectId(id) // Elimina por el _id convertido a ObjectId
    });
    
    // PASO 5: Verificar si se elimin√≥ algo
    if (resultado.deletedCount === 0) { // Si no se elimin√≥ nada, responde con error 404
      return res.status(404).json({
        success: false,
        message: 'Pel√≠cula no encontrada'
      });
    }
    
    // PASO 6: Confirmar eliminaci√≥n
    console.log(`üóëÔ∏è Pel√≠cula eliminada con ID: ${id}`); // Muestra el id eliminado en consola
    res.status(200).json({ // Env√≠a respuesta HTTP 200
      success: true,
      message: 'Pel√≠cula eliminada correctamente'
    });
    
  } catch (error) {
    console.error('‚ùå Error al eliminar pel√≠cula:', error.message); // Muestra el error en consola
    next(error); // Pasa el error al siguiente middleware
  }
}

// ==========================================
// EXPORTAR TODAS LAS FUNCIONES
// ==========================================
// Exporta todas las funciones para usarlas en las rutas
module.exports = {
  getPeliculas, // Obtener todas las pel√≠culas
  getPeliculaById, // Obtener una pel√≠cula por ID
  createPelicula, // Crear una nueva pel√≠cula
  updatePelicula, // Actualizar una pel√≠cula existente
  deletePelicula // Eliminar una pel√≠cula
};

// ==========================================
// NOTAS:
// - Cada funci√≥n maneja una operaci√≥n CRUD (Create, Read, Update, Delete)
// - Siempre validamos los datos antes de usarlos
// - Los errores se pasan al middleware con next(error)
// - Usamos try-catch para capturar errores
// - Los status codes HTTP indican el resultado (200=ok, 404=no encontrado, etc)
// ==========================================
