// ==========================================
// ARCHIVO: server/controllers/peliculasController.js
// PROP√ìSITO: L√≥gica de negocio para manejar pel√≠culas
// ==========================================

const connectDB = require('../config/db'); // Funci√≥n para conectar a la base de datos
const { ObjectId } = require('mongodb'); // Para trabajar con IDs de MongoDB

// ==========================================
// FUNCI√ìN 1: OBTENER TODAS LAS PEL√çCULAS
// ==========================================
async function getPeliculas(req, res, next) {
  try {
    // PASO 1: Obtener conexi√≥n a la base de datos
    const db = await connectDB();
    
    // PASO 2: Buscar todas las pel√≠culas en la colecci√≥n 'peliculas'
    const peliculas = await db.collection('peliculas').find({}).toArray();
    
    // PASO 3: Mostrar informaci√≥n en consola (para debug)
    console.log(`üìΩÔ∏è Encontradas ${peliculas.length} pel√≠culas en el cat√°logo`);
    
    // PASO 4: Enviar respuesta exitosa al cliente
    res.status(200).json({
      success: true, // Indica que todo sali√≥ bien
      message: 'Pel√≠culas obtenidas correctamente',
      cantidad: peliculas.length,
      data: peliculas // Los datos reales
    });
    
  } catch (error) {
    // Si hay error, pasarlo al middleware de manejo de errores
    console.error('‚ùå Error al obtener pel√≠culas:', error.message);
    next(error);
  }
}

// ==========================================
// FUNCI√ìN 2: OBTENER UNA PEL√çCULA POR SU ID
// ==========================================
async function getPeliculaById(req, res, next) {
  try {
    // PASO 1: Obtener conexi√≥n a la base de datos
    const db = await connectDB();
    
    // PASO 2: Obtener el ID desde los par√°metros de la URL (/peliculas/123abc)
    const { id } = req.params;
    
    // PASO 3: Validar que el ID tenga formato correcto de MongoDB
    if (!ObjectId.isValid(id)) {
      return res.status(400).json({
        success: false,
        message: 'ID de pel√≠cula no v√°lido'
      });
    }
    
    // PASO 4: Buscar la pel√≠cula espec√≠fica en la base de datos
    const pelicula = await db.collection('peliculas').findOne({ 
      _id: new ObjectId(id) 
    });
    
    // PASO 5: Verificar si se encontr√≥ la pel√≠cula
    if (!pelicula) {
      return res.status(404).json({
        success: false,
        message: 'Pel√≠cula no encontrada'
      });
    }
    
    // PASO 6: Enviar la pel√≠cula encontrada
    console.log(`üé¨ Pel√≠cula encontrada: ${pelicula.title}`);
    res.status(200).json({
      success: true,
      message: 'Pel√≠cula encontrada',
      data: pelicula
    });
    
  } catch (error) {
    console.error('‚ùå Error al obtener pel√≠cula por ID:', error.message);
    next(error);
  }
}

// ==========================================
// FUNCI√ìN 3: CREAR UNA NUEVA PEL√çCULA
// ==========================================
async function createPelicula(req, res, next) {
  try {
    // PASO 1: Obtener conexi√≥n a la base de datos
    const db = await connectDB();
    
    // PASO 2: Obtener los datos de la nueva pel√≠cula desde el cuerpo de la petici√≥n
    const nuevaPelicula = req.body;
    
    // PASO 3: Agregar fecha de creaci√≥n autom√°ticamente
    nuevaPelicula.fechaCreacion = new Date();
    nuevaPelicula.fechaActualizacion = new Date();
    
    // PASO 4: Verificar si ya existe una pel√≠cula con el mismo tmdb_id
    if (nuevaPelicula.tmdb_id) {
      const peliculaExistente = await db.collection('peliculas').findOne({
        tmdb_id: nuevaPelicula.tmdb_id
      });
      
      if (peliculaExistente) {
        return res.status(409).json({
          success: false,
          message: 'Ya existe una pel√≠cula con ese TMDB ID'
        });
      }
    }
    
    // PASO 5: Insertar la nueva pel√≠cula en la base de datos
    const resultado = await db.collection('peliculas').insertOne(nuevaPelicula);
    
    // PASO 6: Confirmar que se cre√≥ correctamente
    console.log(`‚úÖ Nueva pel√≠cula creada: ${nuevaPelicula.title}`);
    res.status(201).json({
      success: true,
      message: 'Pel√≠cula creada exitosamente',
      id: resultado.insertedId // ID de la pel√≠cula reci√©n creada
    });
    
  } catch (error) {
    console.error('‚ùå Error al crear pel√≠cula:', error.message);
    next(error);
  }
}

// ==========================================
// FUNCI√ìN 4: ACTUALIZAR UNA PEL√çCULA EXISTENTE
// ==========================================
async function updatePelicula(req, res, next) {
  try {
    // PASO 1: Obtener conexi√≥n a la base de datos
    const db = await connectDB();
    
    // PASO 2: Obtener ID y datos a actualizar
    const { id } = req.params;
    const cambios = req.body;
    
    // PASO 3: Validar ID
    if (!ObjectId.isValid(id)) {
      return res.status(400).json({
        success: false,
        message: 'ID de pel√≠cula no v√°lido'
      });
    }
    
    // PASO 4: Agregar fecha de actualizaci√≥n
    cambios.fechaActualizacion = new Date();
    
    // PASO 5: Actualizar la pel√≠cula en la base de datos
    const resultado = await db.collection('peliculas').updateOne(
      { _id: new ObjectId(id) }, // Filtro: qu√© documento actualizar
      { $set: cambios } // Operaci√≥n: qu√© campos cambiar
    );
    
    // PASO 6: Verificar si se encontr√≥ y actualiz√≥ la pel√≠cula
    if (resultado.matchedCount === 0) {
      return res.status(404).json({
        success: false,
        message: 'Pel√≠cula no encontrada'
      });
    }
    
    // PASO 7: Confirmar actualizaci√≥n
    console.log(`üìù Pel√≠cula actualizada con ID: ${id}`);
    res.status(200).json({
      success: true,
      message: 'Pel√≠cula actualizada correctamente'
    });
    
  } catch (error) {
    console.error('‚ùå Error al actualizar pel√≠cula:', error.message);
    next(error);
  }
}

// ==========================================
// FUNCI√ìN 5: ELIMINAR UNA PEL√çCULA
// ==========================================
async function deletePelicula(req, res, next) {
  try {
    // PASO 1: Obtener conexi√≥n a la base de datos
    const db = await connectDB();
    
    // PASO 2: Obtener el ID de la pel√≠cula a eliminar
    const { id } = req.params;
    
    // PASO 3: Validar ID
    if (!ObjectId.isValid(id)) {
      return res.status(400).json({
        success: false,
        message: 'ID de pel√≠cula no v√°lido'
      });
    }
    
    // PASO 4: Eliminar la pel√≠cula de la base de datos
    const resultado = await db.collection('peliculas').deleteOne({
      _id: new ObjectId(id)
    });
    
    // PASO 5: Verificar si se elimin√≥ algo
    if (resultado.deletedCount === 0) {
      return res.status(404).json({
        success: false,
        message: 'Pel√≠cula no encontrada'
      });
    }
    
    // PASO 6: Confirmar eliminaci√≥n
    console.log(`üóëÔ∏è Pel√≠cula eliminada con ID: ${id}`);
    res.status(200).json({
      success: true,
      message: 'Pel√≠cula eliminada correctamente'
    });
    
  } catch (error) {
    console.error('‚ùå Error al eliminar pel√≠cula:', error.message);
    next(error);
  }
}

// ==========================================
// EXPORTAR TODAS LAS FUNCIONES
// ==========================================
module.exports = {
  getPeliculas,
  getPeliculaById,
  createPelicula,
  updatePelicula,
  deletePelicula
};

// ==========================================
// NOTAS:
// - Cada funci√≥n maneja una operaci√≥n CRUD (Create, Read, Update, Delete)
// - Siempre validamos los datos antes de usarlos
// - Los errores se pasan al middleware con next(error)
// - Usamos try-catch para capturar errores
// - Los status codes HTTP indican el resultado (200=ok, 404=no encontrado, etc)
// ==========================================
